kotlin version: 2.0.21
error message: org.jetbrains.kotlin.backend.common.BackendException: Backend Internal error: Exception during IR lowering
File being compiled: /Users/sarangyang/AndroidStudioProjects/Location/library/src/main/java/com/sry/library/PermissionBox.kt
The root cause java.lang.RuntimeException was thrown at: org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:47)
	at org.jetbrains.kotlin.backend.common.CodegenUtil.reportBackendException(CodegenUtil.kt:253)
	at org.jetbrains.kotlin.backend.common.CodegenUtil.reportBackendException$default(CodegenUtil.kt:236)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:65)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:52)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:38)
	at org.jetbrains.kotlin.backend.common.phaser.NamedCompilerPhase.phaseBody(CompilerPhase.kt:166)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:27)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:14)
	at org.jetbrains.kotlin.backend.common.phaser.NamedCompilerPhase.phaseBody(CompilerPhase.kt:166)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.CompilerPhaseKt.invokeToplevel(CompilerPhase.kt:62)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.invokeCodegen(JvmIrCodegenFactory.kt:371)
	at org.jetbrains.kotlin.codegen.CodegenFactory.generateModule(CodegenFactory.kt:47)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.generateModuleInFrontendIRMode(JvmIrCodegenFactory.kt:433)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.generateCodeFromIr(jvmCompilerPipeline.kt:246)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.compileModulesUsingFrontendIrAndLightTree(jvmCompilerPipeline.kt:142)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:148)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:43)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:103)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:49)
	at org.jetbrains.kotlin.cli.common.CLITool.exec(CLITool.kt:101)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:464)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:73)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.doCompile(IncrementalCompilerRunner.kt:506)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileImpl(IncrementalCompilerRunner.kt:423)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:301)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:675)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:92)
	at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1660)
	at jdk.internal.reflect.GeneratedMethodAccessor12.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:360)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:587)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:828)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:705)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:704)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: java.lang.RuntimeException: Exception while generating code for:
FUN name:PermissionBox visibility:public modality:FINAL <> (modifier:androidx.compose.ui.Modifier, permissions:kotlin.collections.List<kotlin.String>, requiredPermissions:kotlin.collections.List<kotlin.String>, description:kotlin.String?, contentAlignment:androidx.compose.ui.Alignment, onGranted:@[Composable] @[ExtensionFunctionType] kotlin.Function2<androidx.compose.foundation.layout.BoxScope, kotlin.collections.List<kotlin.String>, kotlin.Unit>) returnType:kotlin.Unit
  annotations:
    OptIn(markerClass = [CLASS_REFERENCE 'CLASS IR_EXTERNAL_DECLARATION_STUB ANNOTATION_CLASS name:ExperimentalPermissionsApi modality:OPEN visibility:public superTypes:[kotlin.Annotation]' type=kotlin.reflect.KClass<com.google.accompanist.permissions.ExperimentalPermissionsApi>])
    Composable
  VALUE_PARAMETER name:modifier index:0 type:androidx.compose.ui.Modifier
    EXPRESSION_BODY
      ERROR_EXPR 'Default Stub' type=androidx.compose.ui.Modifier
  VALUE_PARAMETER name:permissions index:1 type:kotlin.collections.List<kotlin.String>
  VALUE_PARAMETER name:requiredPermissions index:2 type:kotlin.collections.List<kotlin.String>
    EXPRESSION_BODY
      ERROR_EXPR 'Default Stub' type=kotlin.collections.List<kotlin.String>
  VALUE_PARAMETER name:description index:3 type:kotlin.String?
    EXPRESSION_BODY
      ERROR_EXPR 'Default Stub' type=kotlin.String?
  VALUE_PARAMETER name:contentAlignment index:4 type:androidx.compose.ui.Alignment
    EXPRESSION_BODY
      ERROR_EXPR 'Default Stub' type=androidx.compose.ui.Alignment
  VALUE_PARAMETER name:onGranted index:5 type:@[Composable] @[ExtensionFunctionType] kotlin.Function2<androidx.compose.foundation.layout.BoxScope, kotlin.collections.List<kotlin.String>, kotlin.Unit>
  BLOCK_BODY
    VAR name:context type:android.content.Context [val]
      CALL 'public final fun <get-current> (): T of androidx.compose.runtime.CompositionLocal [inline] declared in androidx.compose.runtime.CompositionLocal' type=android.content.Context origin=GET_PROPERTY
        $this: TYPE_OP type=androidx.compose.runtime.CompositionLocal<T of androidx.compose.runtime.CompositionLocal> origin=IMPLICIT_CAST typeOperand=androidx.compose.runtime.CompositionLocal<T of androidx.compose.runtime.CompositionLocal>
          CALL 'public final fun <get-LocalContext> (): androidx.compose.runtime.ProvidableCompositionLocal<android.content.Context> declared in androidx.compose.ui.platform.AndroidCompositionLocals_androidKt' type=androidx.compose.runtime.ProvidableCompositionLocal<android.content.Context> origin=GET_PROPERTY
    VAR PROPERTY_DELEGATE name:errorText$delegate type:androidx.compose.runtime.MutableState<kotlin.String> [val]
      CALL 'public final fun remember <T> (calculation: @[DisallowComposableCalls] kotlin.Function0<T of androidx.compose.runtime.ComposablesKt.remember>): T of androidx.compose.runtime.ComposablesKt.remember [inline] declared in androidx.compose.runtime.ComposablesKt' type=androidx.compose.runtime.MutableState<kotlin.String> origin=null
        <T>: androidx.compose.runtime.MutableState<kotlin.String>
        calculation: BLOCK type=kotlin.Function0<androidx.compose.runtime.MutableState<kotlin.String>> origin=LAMBDA
          COMPOSITE type=kotlin.Unit origin=null
          FUNCTION_REFERENCE 'private final fun PermissionBox$lambda$1 (): androidx.compose.runtime.MutableState<kotlin.String> declared in com.sry.library.PermissionBoxKt' type=kotlin.Function0<androidx.compose.runtime.MutableState<kotlin.String>> origin=INLINE_LAMBDA reflectionTarget=null
    VAR name:permissionState type:com.google.accompanist.permissions.MultiplePermissionsState [val]
      CALL 'public final fun rememberMultiplePermissionsState (permissions: kotlin.collections.List<kotlin.String>, onPermissionsResult: kotlin.Function1<kotlin.collections.Map<kotlin.String, kotlin.Boolean>, kotlin.Unit>): com.google.accompanist.permissions.MultiplePermissionsState declared in com.google.accompanist.permissions.MultiplePermissionsStateKt' type=com.google.accompanist.permissions.MultiplePermissionsState origin=null
        permissions: GET_VAR 'permissions: kotlin.collections.List<kotlin.String> declared in com.sry.library.PermissionBoxKt.PermissionBox' type=kotlin.collections.List<kotlin.String> origin=null
        onPermissionsResult: BLOCK type=kotlin.Function1<kotlin.collections.Map<kotlin.String, kotlin.Boolean>, kotlin.Unit> origin=LAMBDA
          COMPOSITE type=kotlin.Unit origin=null
          CALL 'public final fun <jvm-indy> <T> (dynamicCall: T of kotlin.jvm.internal.<jvm-indy>, bootstrapMethodHandle: kotlin.Any, vararg bootstrapMethodArguments: kotlin.Any): T of kotlin.jvm.internal.<jvm-indy> declared in kotlin.jvm.internal' type=kotlin.Function1<kotlin.collections.Map<kotlin.String, kotlin.Boolean>, kotlin.Unit> origin=null
            <T>: kotlin.Function1<kotlin.collections.Map<kotlin.String, kotlin.Boolean>, kotlin.Unit>
            dynamicCall: CALL 'public final fun invoke (p0: kotlin.collections.List<kotlin.String>, p1: androidx.compose.runtime.MutableState<kotlin.String>): kotlin.Function1<kotlin.collections.Map<kotlin.String, kotlin.Boolean>, kotlin.Unit> declared in kotlin.jvm.internal.invokeDynamic' type=kotlin.Function1<kotlin.collections.Map<kotlin.String, kotlin.Boolean>, kotlin.Unit> origin=null
              p0: GET_VAR 'requiredPermissions: kotlin.collections.List<kotlin.String> declared in com.sry.library.PermissionBoxKt.PermissionBox' type=kotlin.collections.List<kotlin.String> origin=null
              p1: GET_VAR 'val errorText$delegate: androidx.compose.runtime.MutableState<kotlin.String> [val] declared in com.sry.library.PermissionBoxKt.PermissionBox' type=androidx.compose.runtime.MutableState<kotlin.String> origin=null
            bootstrapMethodHandle: CALL 'public final fun <jvm-method-handle> (tag: kotlin.Int, owner: kotlin.String, name: kotlin.String, descriptor: kotlin.String, isInterface: kotlin.Boolean): kotlin.Any declared in kotlin.jvm.internal' type=kotlin.Any origin=null
              tag: CONST Int type=kotlin.Int value=6
              owner: CONST String type=kotlin.String value="java/lang/invoke/LambdaMetafactory"
              name: CONST String type=kotlin.String value="metafactory"
              descriptor: CONST String type=kotlin.String value="(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"
              isInterface: CONST Boolean type=kotlin.Boolean value=false
            bootstrapMethodArguments: VARARG type=kotlin.Array<kotlin.Any> varargElementType=kotlin.Any
              CALL 'public final fun <jvm-original-method-type> (method: kotlin.Any): kotlin.Any declared in kotlin.jvm.internal' type=kotlin.Any origin=null
                method: RAW_FUNCTION_REFERENCE 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 [operator] declared in kotlin.Function1' type=kotlin.Any
              RAW_FUNCTION_REFERENCE 'private final fun PermissionBox$lambda$6 ($requiredPermissions: kotlin.collections.List<kotlin.String>, $errorText$delegate: androidx.compose.runtime.MutableState<kotlin.String>, map: kotlin.collections.Map<kotlin.String, kotlin.Boolean>): kotlin.Unit? declared in com.sry.library.PermissionBoxKt' type=kotlin.Any
              CALL 'public final fun <jvm-original-method-type> (method: kotlin.Any): kotlin.Any declared in kotlin.jvm.internal' type=kotlin.Any origin=null
                method: RAW_FUNCTION_REFERENCE 'public abstract fun invoke (p1: kotlin.collections.Map<kotlin.String, kotlin.Boolean>): kotlin.Unit? [fake_override,operator] declared in kotlin.jvm.internal.invokeDynamic.<fake>' type=kotlin.Any
    VAR name:allRequiredPermissionsGranted type:kotlin.Boolean [val]
      CALL 'public final fun none <T> (predicate: kotlin.Function1<T of kotlin.collections.CollectionsKt.none, kotlin.Boolean>): kotlin.Boolean [inline] declared in kotlin.collections.CollectionsKt' type=kotlin.Boolean origin=null
        <T>: com.google.accompanist.permissions.PermissionState
        $receiver: CALL 'public abstract fun <get-revokedPermissions> (): kotlin.collections.List<com.google.accompanist.permissions.PermissionState> declared in com.google.accompanist.permissions.MultiplePermissionsState' type=kotlin.collections.List<com.google.accompanist.permissions.PermissionState> origin=GET_PROPERTY
          $this: GET_VAR 'val permissionState: com.google.accompanist.permissions.MultiplePermissionsState [val] declared in com.sry.library.PermissionBoxKt.PermissionBox' type=com.google.accompanist.permissions.MultiplePermissionsState origin=null
        predicate: BLOCK type=kotlin.Function1<com.google.accompanist.permissions.PermissionState, kotlin.Boolean> origin=LAMBDA
          COMPOSITE type=kotlin.Unit origin=null
          FUNCTION_REFERENCE 'private final fun PermissionBox$lambda$7 ($requiredPermissions: kotlin.collections.List<kotlin.String>, it: com.google.accompanist.permissions.PermissionState): kotlin.Boolean declared in com.sry.library.PermissionBoxKt' type=kotlin.Function1<com.google.accompanist.permissions.PermissionState, kotlin.Boolean> origin=INLINE_LAMBDA reflectionTarget=null
            $requiredPermissions: GET_VAR 'requiredPermissions: kotlin.collections.List<kotlin.String> declared in com.sry.library.PermissionBoxKt.PermissionBox' type=kotlin.collections.List<kotlin.String> origin=null
    CALL 'public final fun Box$default (modifier: androidx.compose.ui.Modifier?, contentAlignment: androidx.compose.ui.Alignment?, propagateMinConstraints: kotlin.Boolean, content: @[Composable] @[ExtensionFunctionType] kotlin.Function1<androidx.compose.foundation.layout.BoxScope, kotlin.Unit>, $mask0: kotlin.Int, $handler: kotlin.Any?): kotlin.Unit [inline] declared in androidx.compose.foundation.layout.BoxKt' type=kotlin.Unit origin=DEFAULT_DISPATCH_CALL
      modifier: CALL 'public open fun then (other: androidx.compose.ui.Modifier): androidx.compose.ui.Modifier [infix] declared in androidx.compose.ui.Modifier' type=androidx.compose.ui.Modifier origin=null
        $this: CALL 'public final fun fillMaxSize$default (fraction: kotlin.Float, $mask0: kotlin.Int, $handler: kotlin.Any?): androidx.compose.ui.Modifier declared in androidx.compose.foundation.layout.SizeKt' type=androidx.compose.ui.Modifier origin=DEFAULT_DISPATCH_CALL
          $receiver: GET_FIELD 'FIELD FIELD_FOR_OBJECT_INSTANCE name:Companion type:androidx.compose.ui.Modifier.Companion visibility:public [final,static] declared in androidx.compose.ui.Modifier' type=androidx.compose.ui.Modifier.Companion origin=null
          fraction: COMPOSITE type=kotlin.Float origin=DEFAULT_VALUE
            CONST Float type=kotlin.Float value=0.0
          $mask0: CONST Int type=kotlin.Int value=1
          $handler: CONST Null type=kotlin.Any? value=null
        other: GET_VAR 'modifier: androidx.compose.ui.Modifier declared in com.sry.library.PermissionBoxKt.PermissionBox' type=androidx.compose.ui.Modifier origin=null
      contentAlignment: WHEN type=androidx.compose.ui.Alignment origin=IF
        BRANCH
          if: GET_VAR 'val allRequiredPermissionsGranted: kotlin.Boolean [val] declared in com.sry.library.PermissionBoxKt.PermissionBox' type=kotlin.Boolean origin=null
          then: BLOCK type=androidx.compose.ui.Alignment origin=null
            GET_VAR 'contentAlignment: androidx.compose.ui.Alignment declared in com.sry.library.PermissionBoxKt.PermissionBox' type=androidx.compose.ui.Alignment origin=null
        BRANCH
          if: CONST Boolean type=kotlin.Boolean value=true
          then: BLOCK type=androidx.compose.ui.Alignment origin=null
            CALL 'public final fun <get-Center> (): androidx.compose.ui.Alignment declared in androidx.compose.ui.Alignment.Companion' type=androidx.compose.ui.Alignment origin=GET_PROPERTY
              $this: GET_FIELD 'FIELD FIELD_FOR_OBJECT_INSTANCE name:Companion type:androidx.compose.ui.Alignment.Companion visibility:public [final,static] declared in androidx.compose.ui.Alignment' type=androidx.compose.ui.Alignment.Companion origin=null
      propagateMinConstraints: COMPOSITE type=kotlin.Boolean origin=DEFAULT_VALUE
        CONST Boolean type=kotlin.Boolean value=false
      content: BLOCK type=@[ExtensionFunctionType] kotlin.Function1<androidx.compose.foundation.layout.BoxScope, kotlin.Unit> origin=LAMBDA
        COMPOSITE type=kotlin.Unit origin=null
        FUNCTION_REFERENCE 'private final fun PermissionBox$lambda$13 ($allRequiredPermissionsGranted: kotlin.Boolean, $onGranted: @[Composable] @[ExtensionFunctionType] kotlin.Function2<androidx.compose.foundation.layout.BoxScope, kotlin.collections.List<kotlin.String>, kotlin.Unit>, $permissionState: com.google.accompanist.permissions.MultiplePermissionsState, $description: kotlin.String?, $errorText$delegate: androidx.compose.runtime.MutableState<kotlin.String>, $context: android.content.Context): kotlin.Unit declared in com.sry.library.PermissionBoxKt' type=@[ExtensionFunctionType] kotlin.Function1<androidx.compose.foundation.layout.BoxScope, kotlin.Unit> origin=INLINE_LAMBDA reflectionTarget=null
          $allRequiredPermissionsGranted: GET_VAR 'val allRequiredPermissionsGranted: kotlin.Boolean [val] declared in com.sry.library.PermissionBoxKt.PermissionBox' type=kotlin.Boolean origin=null
          $onGranted: GET_VAR 'onGranted: @[Composable] @[ExtensionFunctionType] kotlin.Function2<androidx.compose.foundation.layout.BoxScope, kotlin.collections.List<kotlin.String>, kotlin.Unit> declared in com.sry.library.PermissionBoxKt.PermissionBox' type=@[Composable] @[ExtensionFunctionType] kotlin.Function2<androidx.compose.foundation.layout.BoxScope, kotlin.collections.List<kotlin.String>, kotlin.Unit> origin=null
          $permissionState: GET_VAR 'val permissionState: com.google.accompanist.permissions.MultiplePermissionsState [val] declared in com.sry.library.PermissionBoxKt.PermissionBox' type=com.google.accompanist.permissions.MultiplePermissionsState origin=null
          $description: GET_VAR 'description: kotlin.String? declared in com.sry.library.PermissionBoxKt.PermissionBox' type=kotlin.String? origin=null
          $errorText$delegate: GET_VAR 'val errorText$delegate: androidx.compose.runtime.MutableState<kotlin.String> [val] declared in com.sry.library.PermissionBoxKt.PermissionBox' type=androidx.compose.runtime.MutableState<kotlin.String> origin=null
          $context: GET_VAR 'val context: android.content.Context [val] declared in com.sry.library.PermissionBoxKt.PermissionBox' type=android.content.Context origin=null
      $mask0: CONST Int type=kotlin.Int value=4
      $handler: CONST Null type=kotlin.Any? value=null

	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:47)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate$default(FunctionCodegen.kt:40)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethodNode(ClassCodegen.kt:406)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethod(ClassCodegen.kt:423)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generate(ClassCodegen.kt:168)
	at org.jetbrains.kotlin.backend.jvm.FileCodegen.lower(JvmPhases.kt:39)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseFactoriesKt.createFilePhase$lambda$4(PhaseFactories.kt:71)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseBuildersKt$createSimpleNamedCompilerPhase$1.phaseBody(PhaseBuilders.kt:69)
	at org.jetbrains.kotlin.backend.common.phaser.SimpleNamedCompilerPhase.phaseBody(CompilerPhase.kt:226)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:62)
	... 44 more
Caused by: org.jetbrains.kotlin.codegen.CompilationException: Back-end (JVM) Internal error: Couldn't inline method call: CALL 'public final fun <get-current> (): T of androidx.compose.runtime.CompositionLocal [inline] declared in androidx.compose.runtime.CompositionLocal' type=android.content.Context origin=GET_PROPERTY
Method: null
File is unknown
The root cause java.lang.IllegalStateException was thrown at: org.jetbrains.kotlin.codegen.inline.SourceCompilerForInlineKt.getMethodNode(SourceCompilerForInline.kt:118)
	at org.jetbrains.kotlin.codegen.inline.InlineCodegen.performInline(InlineCodegen.kt:65)
	at org.jetbrains.kotlin.backend.jvm.codegen.IrInlineCodegen.genInlineCall(IrInlineCodegen.kt:163)
	at org.jetbrains.kotlin.backend.jvm.codegen.IrInlineCallGenerator.genCall(IrInlineCallGenerator.kt:36)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitCall(ExpressionCodegen.kt:653)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitCall(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.expressions.IrCall.accept(IrCall.kt:24)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitVariable(ExpressionCodegen.kt:790)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitVariable(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.declarations.IrVariable.accept(IrVariable.kt:36)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitStatementContainer(ExpressionCodegen.kt:579)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlockBody(ExpressionCodegen.kt:584)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlockBody(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.expressions.IrBlockBody.accept(IrBlockBody.kt:20)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.generate(ExpressionCodegen.kt:240)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.doGenerate(FunctionCodegen.kt:123)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:44)
	... 54 more
Caused by: java.lang.IllegalStateException: couldn't find inline method Landroidx/compose/runtime/CompositionLocal;.getCurrent()Ljava/lang/Object;
	at org.jetbrains.kotlin.codegen.inline.SourceCompilerForInlineKt.getMethodNode(SourceCompilerForInline.kt:118)
	at org.jetbrains.kotlin.codegen.inline.SourceCompilerForInlineKt.loadCompiledInlineFunction(SourceCompilerForInline.kt:96)
	at org.jetbrains.kotlin.backend.jvm.codegen.IrSourceCompilerForInline.compileInlineFunction(IrSourceCompilerForInline.kt:91)
	at org.jetbrains.kotlin.codegen.inline.InlineCodegen.compileInline(InlineCodegen.kt:43)
	at org.jetbrains.kotlin.codegen.inline.InlineCodegen.performInline(InlineCodegen.kt:51)
	... 69 more


